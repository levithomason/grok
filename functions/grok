###############################################################################
# GROK
#
# Run this function to "reset & update" your setup.
#

command=$1

###############################################################################
# DEFINE FUNCTIONS
#

show_usage() {
  echo ""
  echo "  Commands:"
  echo "    update                        pull latest repo and run"
  echo "    install   <cli|app> <name>    install new cli or desktop app"
  echo "    uninstall <cli|app> <name>    uninstall cli or desktop app"
  echo "    list                          lists installed clis and apps"
  echo "    search                        search for clis and apps to install"
}

prompt_commit_push() {
  old_pwd=$(pwd)
  cd $GROK_ROOT
  app_status=$(git status git status $GROK_INSTALLED_APPS --short)
  cli_status=$(git status git status $GROK_INSTALLED_CLIS --short)

  if [[ -z $cli_status && -z $app_status ]] then
    echo ""
    echo "GROK: no changes made."
  else
    echo ""
    [[ -n $app_status ]] && git diff $GROK_INSTALLED_APPS
    [[ -n $cli_status ]] && git diff $GROK_INSTALLED_CLIS
    echo ""
    # read silent (-s), single character (-k)
    read -k "SHOULD_COMMIT?Commit and push changes? [y/N] "
    echo ""

    if [[ $SHOULD_COMMIT =~ ^[Yy]$ ]] then
      [[ -n $app_status ]] && git add $GROK_INSTALLED_APPS
      [[ -n $cli_status ]] && git add $GROK_INSTALLED_CLIS

      git commit -m \"$1\"
      git push
      echo ""
    fi
  fi

  cd $old_pwd

  unset app_status
  unset cli_status
  unset SHOULD_COMMIT
}

invalid_option() {
  echo ""
  echo "  Error: \"$1\" is not a valid option"
  echo ""
  show_usage
}

install_all() {
  . $GROK_LIB/install_clis.zsh
  . $GROK_LIB/install_apps.zsh
}

###############################################################################
# COMMANDS
#

#
# Usage
#
if [[ -z $command || $command == "help" || $command == "--help" ]] then
  show_usage
  return false
fi

#
# Invalid Command
#
if [[ $command != "list" &&       \
      $command != "update" &&     \
      $command != "install" &&    \
      $command != "uninstall" &&  \
      $command != "search"
   ]] then
  show_usage
  return false
fi

#
# List
#
if [[ $command == "list" ]] then
  . $GROK_LIB/list_clis.zsh
  . $GROK_LIB/list_apps.zsh
fi

#
# Install / Uninstall
#
if [[ $command == "install" || $command == "uninstall" ]] then
  type=$2
  name=$3

  # Install all
  if [[ -z $type && -z $name && $command == "install" ]] then
    install_all
    return false
  fi

  # invalid type
  if [[ -n $type && $type != "cli" && $type != "app" ]] then
    invalid_option $type
    return false
  fi

  # cli
  if [[ $type == "cli" ]] then
    brew $command $name
    . $GROK_LIB/freeze_clis.zsh
    prompt_commit_push "$command $type: $name"
  fi

  # app
  if [[ $type == "app" ]] then
    brew cask $command $name
    . $GROK_LIB/freeze_apps.zsh
    prompt_commit_push "$command $type: $name"
  fi

  unset type
  unset name
fi

#
# Update
#
if [[ $command == "update" ]] then
  . $GROK_LIB/update.zsh
fi

#
# Search
#
if [[ $command == "search" ]] then
  brew search $2
fi

unset command
