###############################################################################
# GROK
#
# Run this function to "reset & update" your setup.
#

command=$1

###############################################################################
# DEFINE FUNCTIONS
#

show_usage() {
  echo ""
  echo "  Usage:"
  echo "    grok update"
  echo "      - pull latest repo and run"
  echo ""
  echo "    grok install"
  echo "      - installs frozen cli tools and desktop apps"
  echo ""
  echo "    grok list"
  echo "      - lists cli tools and desktop apps"
  echo ""
  echo "    grok <install|uninstall> <cli|app> <name>"
  echo "      - manage cli tools and desktop apps"
}

prompt_commit_push() {
  status=$(git status --short)
  if [[ -n "$status" ]] then
    echo "GROK: no changes made."
    return false
  fi

  echo ""
  # read silent (-s), single character (-k)
  read -k "SHOULD_COMMIT?GROK: Commit and push changes? [y/N] "
  echo ""
  if [[ $SHOULD_COMMIT =~ ^[Yy]$ ]] then
    echo "git add $GROK_INSTALLED_APPS"
    echo "git add $GROK_INSTALLED_CLIS"
    echo "git commit -m \"$1\""
    echo "git push"
    echo ""
  fi
}

invalid_option() {
  echo ""
  echo "  Error: \"$1\" is not a valid option"
  echo ""
  show_usage
}

install_all() {
  . $GROK_LIB/install_clis.zsh
  . $GROK_LIB/install_apps.zsh
}

###############################################################################
# COMMAND
#

#
# Usage
#
if [[ -z $command || $command == "help" || $command == "--help" ]] then
  show_usage
  return false
fi

#
# Invalid Command
#
if [[ $command != "list" &&     \
      $command != "update" &&   \
      $command != "install" &&  \
      $command != "uninstall"   \
   ]] then
  show_usage
  return false
fi

#
# List
#
if [[ $command == "list" ]] then
  . $GROK_LIB/list_clis.zsh
  . $GROK_LIB/list_apps.zsh
fi

#
# Install / Uninstall
#
if [[ $command == "install" || $command == "uninstall" ]] then
  type=$2
  name=$3

  # Install all
  if [[ -z $type && -z $name && $command == "install" ]] then
    install_all
    return false
  fi

  # invalid type
  if [[ -n $type && $type != "cli" && $type != "app" ]] then
    invalid_option $type
    return false
  fi

  # cli
  if [[ $type == "cli" ]] then
    brew $command $name
    . $GROK_LIB/freeze_clis.zsh
    prompt_commit_push "$command $type: $name"
  fi

  # app
  if [[ $type == "app" ]] then
    brew cask $command $name
    . $GROK_LIB/freeze_apps.zsh
    prompt_commit_push "$command $type: $name"
  fi

  unset type
  unset name
fi

#
# Update
#
if [[ $command == "update" ]] then
  . $GROK_LIB/update.zsh
fi

unset command
